@page "/Chat"
@using Azure.Messaging.EventHubs.Producer;
@using Azure.Messaging.EventHubs;
@using System.Text;

<PageTitle>Chat</PageTitle>

<MudGrid Container="true" Spacing="4">
    <MudItem xs="12">
        <!-- 对话内容区域 -->
        <div class="conversation-area">
            @foreach (var message in messages)
            {
                <div>@message.CreateById say @message.Text</div>
            }
        </div>
    </MudItem>

    <MudItem xs="12">
        <!-- 输入区域 -->
        <div class="input-area">
            <MudTextField @bind-Value="userInput" />
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SendMessage">Send</MudButton>
        </div>
    </MudItem>
</MudGrid>

@code {
    private class Message
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public DateTime CreateTime { get; set; }
        public Guid CreateById { get; set; }
    }

    private List<Message> messages = new List<Message>()
    {
        //20 fake data
        new Message { Id = 1, Text = "Hello", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 2, Text = "Hi", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 3, Text = "How are you?", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 4, Text = "I'm fine, thank you.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 5, Text = "And you?", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 6, Text = "I'm fine too.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 7, Text = "Where are you from?", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 8, Text = "I'm from China.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 9, Text = "I'm from America.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 10, Text = "I'm from Japan.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 11, Text = "I'm from Korea.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 12, Text = "I'm from Russia.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 13, Text = "I'm from England.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
        new Message { Id = 14, Text = "I'm from France.", CreateTime = DateTime.Now, CreateById = Guid.NewGuid() },
    };

    private string userInput;
    private void SendMessage()
    {
        if (!string.IsNullOrEmpty(userInput))
        {
            messages.Add(new Message
                {
                    CreateById = Guid.NewGuid(),
                    CreateTime = DateTime.Now,
                    Id = messages.Count + 1,
                    Text = userInput
                });
            userInput = string.Empty;
        }
    }

    //add auto specker (each 1 sec)
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(1000);
                messages.Add(new Message
                    {
                        CreateById = Guid.NewGuid(),
                        CreateTime = DateTime.Now,
                        Id = messages.Count + 1,
                        Text = "Hello"
                    });
                StateHasChanged();
            }
        });
    }

    //link to azure iot hub
    private async  void ConnectToAzureIoTHub()
    {
        //todo
        // number of events to be sent to the event hub
        int numOfEvents = 3;

        // The Event Hubs client types are safe to cache and use as a singleton for the lifetime
        // of the application, which is best practice when events are being published or read regularly.
        // TODO: Replace the <CONNECTION_STRING> and <HUB_NAME> placeholder values
        EventHubProducerClient producerClient = new EventHubProducerClient(
            "<CONNECTION_STRING>",
            "<HUB_NAME>");

        // Create a batch of events
        using EventDataBatch eventBatch = await producerClient.CreateBatchAsync();

        for (int i = 1; i <= numOfEvents; i++)
        {
            if (!eventBatch.TryAdd(new EventData(Encoding.UTF8.GetBytes($"Event {i}"))))
            {
                // if it is too large for the batch
                throw new Exception($"Event {i} is too large for the batch and cannot be sent.");
            }
        }

        try
        {
            // Use the producer client to send the batch of events to the event hub
            await producerClient.SendAsync(eventBatch);
            Console.WriteLine($"A batch of {numOfEvents} events has been published.");
        }
        finally
        {
            await producerClient.DisposeAsync();
        }
    }
}
